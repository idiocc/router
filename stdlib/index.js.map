{
"version":3,
"file":"stdlib/index.js",
"lineCount":376,
"mappings":"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",
"sources":["node_modules/erotic/src/lib.js","node_modules/os/index.js","node_modules/@artdeco/clean-stack/src/index.js","node_modules/erotic/src/callback.js","node_modules/erotic/src/index.js","node_modules/makepromise/src/index.js","node_modules/fs/index.js","node_modules/@wrote/exists/src/index.js","node_modules/path/index.js","node_modules/resolve-dependency/src/index.js","node_modules/module/index.js","node_modules/stream/index.js","node_modules/catchment/src/lib/index.js","node_modules/catchment/src/index.js","node_modules/@wrote/read/src/index.js","node_modules/mismatch/src/index.js","node_modules/@depack/detect/src/index.js","node_modules/fpj/src/index.js","node_modules/static-analysis/src/lib.js","node_modules/@depack/split/src/index.js","node_modules/erte/src/index.js","node_modules/@wrote/read-dir-structure/src/index.js","src/stdlib.js","node_modules/static-analysis/src/index.js"],
"sourcesContent":["const getLastItem = (array) => {\n  const item = array[array.length - 1]\n  return item\n}\nconst getItemsFrom = (array, from) => array.slice(from)\n\n/**\n * Get a segment of the stack string, defaults are from = 0 and oneLine = false.\n * @param {string} stack the stack string\n * @param {number} [from=0] index from which to slice from\n * @param {boolean} [oneLine=false] Whether just first line must be returned\n * @returns {string} A stack segment starting from the specified line.\n */\nexport const getStackSegment = (stack, from = 0, oneLine = false) => {\n  if (from === 0 && !oneLine) {\n    return stack\n  }\n  const splitStack = stack\n    .split('\\n', oneLine ? from + 1 : undefined)\n  if (oneLine) {\n    const line = getLastItem(splitStack)\n    return line\n  } else {\n    const items = getItemsFrom(splitStack, from)\n    return items.join('\\n')\n  }\n}\n\n/**\n * Get the stack trace part of when the erotic function was called. Disregards\n * first two lines.\n * @param {string} stack error's stack\n * @param {boolean} [transparent] trim the top line as well\n * @returns {string} A part of stack\n */\nexport const getEntryStack = (stack, transparent = false) => {\n  const stackSegment = getStackSegment(stack, 2 + (transparent ? 1 : 0))\n  return stackSegment\n}\n\n/**\n * Get stack line of where the callback was called.\n * @param {string} stack Stack string.\n * @returns {string} Stack line.\n */\nexport const getCalleeStackLine = (stack) => {\n  const calleeStackLine = getStackSegment(stack, 2, true)\n  return calleeStackLine\n}\n\nexport const getStackHeading = message => `Error: ${message}`\n\n/**\n * Extract caller from the function's `arguments`.\n * @param {Object} args arguments\n * @returns {!Function} The caller function from `arguments.callee.caller`.\n */\nexport const getCallerFromArguments = (args) => {\n  const { callee: { caller } } = args\n  return caller\n}","export default os\nexport const {\n  EOL,\n  arch,\n  constants,\n  cpus,\n  endianness,\n  freemem,\n  homedir,\n  hostname,\n  loadavg,\n  networkInterfaces,\n  platform,\n  release,\n  tmpdir,\n  totalmem,\n  type,\n  uptime,\n  userInfo,\n} = os","import { homedir } from 'os'\n\nconst extractPathRegex = /\\s+at.*(?:\\(|\\s)(.*)\\)?/\nconst pathRegex = /^(?:(?:(?:node|(?:internal\\/[\\w/]*|.*node_modules\\/(?:IGNORED_MODULES)\\/.*)?\\w+)\\.js:\\d+:\\d+)|native)/\n\nconst homeDir = homedir()\n\n/**\n * Remove internal Node.JS lines from the error stack traces.\n * @param {string} stack The error stack to update.\n * @param {!_cleanStack.Config} [options] Options for the program.\n * @param {boolean} [options.pretty=false] Replace the absolute path to the home directory with the `~`. Default `false`.\n * @param {!Array<string>} [options.ignoredModules=\"\uff3b'pirates'\uff3d\"] Which modules to ignore in the path. Default `\uff3b'pirates'\uff3d`.\n */\nconst cleanStack = (stack, options) => {\n  const {\n    pretty = false, ignoredModules = ['pirates'],\n  } = options || {}\n  const j = ignoredModules.join('|')\n  const re = new RegExp(pathRegex.source.replace('IGNORED_MODULES', j))\n\n  return stack.replace(/\\\\/g, '/')\n    .split('\\n')\n    .filter(x => {\n      const pathMatches = x.match(extractPathRegex)\n      if (pathMatches === null || !pathMatches[1]) {\n        return true\n      }\n\n      const match = pathMatches[1]\n\n      // Electron\n      if (match.includes('.app/Contents/Resources/electron.asar') ||\n        match.includes('.app/Contents/Resources/default_app.asar')) {\n        return false\n      }\n\n      return !re.test(match)\n    })\n    .filter(x => x.trim())\n    .map(x => {\n      if (pretty) {\n        return x.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')))\n      }\n\n      return x\n    })\n    .join('\\n')\n}\n\nexport default cleanStack\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_cleanStack.Config} Config Options for the program.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _cleanStack.Config Options for the program.\n * @prop {boolean} [pretty=false] Replace the absolute path to the home directory with the `~`. Default `false`.\n * @prop {!Array<string>} [ignoredModules=\"\uff3b'pirates'\uff3d\"] Which modules to ignore in the path. Default `\uff3b'pirates'\uff3d`.\n */\n","import cleanStack from '@artdeco/clean-stack'\nimport {\n  getCallerFromArguments, getCalleeStackLine, getStackHeading,\n} from './lib'\n\n/**\n * Create a callback.\n * @param {!Function} entryCaller The function which was called at entry.\n * @param {string} entryStack The first line of the error stack to be returned\n * @param {boolean} [shadow=false] Print only entry stack.\n */\nexport function makeCallback(entryCaller, entryStack, shadow = false) {\n  /**\n   * This callback should be called when an asynchronous error occurred.\n   * @param {(string|Error)} messageOrError A message string or an _Error_ object at the point of actual error.\n   * @returns {Error} An error with the updated stack which includes the callee.\n   */\n  function cb(messageOrError) {\n    const caller = getCallerFromArguments(arguments)\n    const { stack: errorStack } = new Error()\n    const calleeStackLine = getCalleeStackLine(errorStack)\n    const isError = messageOrError instanceof Error\n    const message = isError ? messageOrError.message : messageOrError\n\n    const stackHeading = getStackHeading(message)\n    const entryHasCallee = caller !== null && entryCaller === caller\n    const stackMessage = [\n      stackHeading,\n      ...(entryHasCallee || shadow ? [entryStack] : [\n        calleeStackLine,\n        entryStack,\n      ]),\n    ].join('\\n')\n\n    const stack = cleanStack(stackMessage)\n    const properties = { message, stack }\n    const e = isError ? messageOrError : new Error()\n\n    return /** @type {Error} */ (Object.assign(/** @type {!Object} */ (e), properties))\n  }\n\n  return cb\n}","import {\n  getEntryStack, getCallerFromArguments,\n} from './lib'\nimport { makeCallback } from './callback'\n\n/**\n * Returns a function to create an error with a stack trace starting at the line in code when the call was made by the callee.\n * @param {boolean} [transparent] Pretend as if the call to the function lead to the error, without exposing any of the internal stack.\n */\nexport default function erotic(transparent) {\n  const { stack } = new Error()\n  const caller = getCallerFromArguments(arguments)\n  const entryStack = getEntryStack(stack, transparent)\n\n  return makeCallback(caller, entryStack, transparent)\n}","import erotic from 'erotic'\n\nfunction checkArgumentIndex(length, i) {\n  if (i > length - 2) {\n    throw new Error('Function does not accept that many arguments.')\n  }\n}\n\n/**\n * Get a promise from a function which otherwise accepts a callback.\n * @param {Function} fn A function to promisify.\n * @param {*|Array<*>} [args] An array of arguments to use in the call, or a single argument.\n * @param {*} [resolveValue] A value to override the value with which the promise will be resolved.\n * @returns {Promise<*>} A promise resolved on callback invocation without an error and rejected on callback called with an error.\n */\nexport default async function makePromise(fn, args, resolveValue) {\n  const er = erotic(true)\n  if (typeof fn !== 'function') {\n    throw new Error('Function must be passed.')\n  }\n  const { length: fnLength } = fn\n  if (!fnLength) {\n    throw new Error('Function does not accept any arguments.')\n  }\n\n  const res = await new Promise((resolve, reject)=> {\n    const cb = (err, res) => {\n      if (err) {\n        const error = er(err)\n        return reject(error)\n      }\n      return resolve(resolveValue || res)\n    }\n\n    let allArgs = [cb]\n\n    if (Array.isArray(args)) {\n      args.forEach((arg, i) => {\n        checkArgumentIndex(fnLength, i)\n      })\n      allArgs =  [...args, cb]\n    } else if (Array.from(arguments).length > 1) { // args passed as a single argument, not array\n      checkArgumentIndex(fnLength, 0)\n      allArgs = [args, cb]\n    }\n    fn(...allArgs)\n  })\n  return res\n}","export default fs\nexport const {\n  ReadStream,\n  Stats,\n  WriteStream,\n  access,\n  accessSync,\n  appendFile,\n  appendFileSync,\n  chmod,\n  chmodSync,\n  chown,\n  chownSync,\n  close,\n  closeSync,\n  constants,\n  copyFile,\n  copyFileSync,\n  createReadStream,\n  createWriteStream,\n  exists,\n  existsSync,\n  fchmod,\n  fchmodSync,\n  fchown,\n  fchownSync,\n  fdatasync,\n  fdatasyncSync,\n  fstat,\n  fstatSync,\n  fsync,\n  fsyncSync,\n  ftruncate,\n  ftruncateSync,\n  futimes,\n  futimesSync,\n  lchmod,\n  lchmodSync,\n  lchown,\n  lchownSync,\n  link,\n  linkSync,\n  lstat,\n  lstatSync,\n  mkdir,\n  mkdirSync,\n  mkdtemp,\n  mkdtempSync,\n  open,\n  openSync,\n  read,\n  readFile,\n  readFileSync,\n  readSync,\n  readdir,\n  readdirSync,\n  readlink,\n  readlinkSync,\n  realpath,\n  realpathSync,\n  rename,\n  renameSync,\n  rmdir,\n  rmdirSync,\n  stat,\n  statSync,\n  symlink,\n  symlinkSync,\n  truncate,\n  truncateSync,\n  unlink,\n  unlinkSync,\n  unwatchFile,\n  utimes,\n  utimesSync,\n  watch,\n  watchFile,\n  write,\n  writeFile,\n  writeFileSync,\n  writeSync,\n} = fs","import makePromise from 'makepromise'\nimport { lstat } from 'fs'\n\n/**\n * Check If The File Or Directory Exists, And Return Stats.\n * @param {string} path The path to check for existence.\n */\nconst exists = async (path) => {\n  try {\n    const ls = /** @type {fs.Stats} */ (await makePromise(lstat, path))\n    return ls\n  } catch (err) {\n    return null\n  }\n}\n\nexport default exists\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('fs').Stats} fs.Stats\n */","export default path\nexport const {\n  basename,\n  delimiter,\n  dirname,\n  extname,\n  format,\n  isAbsolute,\n  join,\n  normalize,\n  parse,\n  posix,\n  relative,\n  resolve,\n  sep,\n  win32,\n} = path","import exists from '@wrote/exists'\nimport { dirname, join, relative } from 'path'\n\n/**\n * For the given local path that can omit the JS/JSX extension and point to a directory (e.g., `./lib` or `./lib/example`), find that file on the filesystem.\n * @param {string} path The dependency path, to resolve e.g., `./lib`.\n * @param {string} [relativeFrom] The optional path of the file that imports the given path.\n */\nconst resolveDependency = async (path, relativeFrom) => {\n  if (relativeFrom) {\n    const d = dirname(relativeFrom)\n    path = join(d, path)\n  }\n  let e = await exists(path)\n  let res = path\n  let isDir = false\n  if (!e) {\n    res = await checkSources(path)\n    if (!res) throw new Error(`${path}.js or ${path}.jsx is not found.`)\n  } else if (e.isDirectory()) {\n    // first try file\n    let fileChecked = false\n    let fileRes\n    if (!path.endsWith('/')) {\n      fileRes = res = await checkSources(path)\n      fileChecked = true\n    }\n    if (!fileRes) {\n      res = await checkSources(join(path, 'index'))\n      if (!res) {\n        const s = fileChecked ? `${path}.jsx? does not exist, and ` : ''\n        throw new Error(`${s}index.jsx? file is not found in ${path}`)\n      }\n      isDir = true\n    }\n  }\n  return {\n    path: path.startsWith('.') ? relative('', res) : res,\n    isDir,\n  }\n}\n\nconst checkSources = async (path) => {\n  let pp = `${path}.js`\n  let e = await exists(pp)\n  if (!e) pp = `${pp}x`; e = await exists(pp)\n  if (e) return pp\n}\n\nexport default resolveDependency","export default _module\nexport const {\n  Module,\n  builtinModules,\n  runMain,\n  wrap,\n} = _module","export default stream\nexport const {\n  Duplex,\n  PassThrough,\n  Readable,\n  Stream,\n  Transform,\n  Writable,\n} = stream","/**\n * Listens for the `error` event once so that when an error in _streamB_ is emitted, is is also emitted in the _streamA_.\n * @param {stream.Stream} streamA The stream that will emit an error once it's caught in the `streamB`.\n * @param {stream.Stream} streamB The stream from which the error originates.\n * @returns The stream the error is listened on, i.e., transparent to calling the `.once` method on that stream.\n */\nexport const pipeError = (streamA, streamB) => {\n  streamB\n    .once('error', e => {\n      streamA.emit('error', e)\n    })\n  return streamB\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('stream').Stream} stream.Stream\n */","import { Writable } from 'stream'\nimport erotic from 'erotic'\nimport cleanStack from '@artdeco/clean-stack'\nimport { pipeError } from './lib'\n\nfunction joinBufferData(array) {\n  return array.join('')\n}\n\n/**\n * A writable stream which collects incoming data into memory, and provides a promise to way for the stream to finish. The promise is resolved with joined chunks.\n */\nexport default class Catchment extends Writable {\n  /**\n   * Create a new catchment to pipe a readable stream into and collect all emitted data.\n   * @param {!_catchment.Options} [options] Options to pass to the `Writable` super constructor, and others shown below.\n   * @param {!stream.Readable} [options.rs] A readable stream to automatically pipe into the catchment. If an error occurs during reading of this stream, the catchment promise will be rejected with it.\n   * @param {boolean} [options.binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n   * @example\n   *\n   * import { createReadStream } from 'fs'\n   * import Catchment from 'catchment'\n   *\n   * const rs = createReadStream('file.txt')\n   * const { promise } = new Catchment({ rs })\n   * const res = await promise\n   */\n  constructor(options) {\n    const {\n      binary = false, rs = null, ...opts\n    } = options || {}\n    /** @suppress {missingProperties} */\n    const { er = erotic(true), proxyError } = options || {}\n    const wrap = (_, e) => er(e)\n    super(/** @type {!stream.WritableOptions} */ (opts))\n    this._caughtData = []\n    this._promise = new Promise((r, j) => {\n      this.on('finish', () => {\n        let d\n        if (binary) {\n          d = Buffer.concat(this._caughtData)\n        } else {\n          d = joinBufferData(this._caughtData)\n        }\n        r(d)\n        this._caughtData = []\n      })\n      this.once('error', (e) => {\n        if (e.stack.indexOf('\\n') == -1) {\n          wrap`${e}`\n          j(e)\n        } else {\n          const stack = cleanStack(e.stack)\n          e.stack = stack\n          if (proxyError) wrap`${e}`\n          j(e)\n        }\n      })\n      if (rs) {\n        pipeError(this, rs).pipe(this)\n      }\n    })\n  }\n  _write(chunk, encoding, callback) {\n    this._caughtData.push(chunk)\n    callback()\n  }\n  /**\n   * A promise which will resolve will all data when the stream finishes.\n   * @type {Promise<string|Buffer>}\n   */\n  get promise() {\n    return this._promise\n  }\n}\n\n/**\n * Collect data into a catchment, and return results when the stream finishes.\n * @param {stream.Readable} readable A readable stream to collect all data from. If an error occurs during reading of this stream, the promise will be rejected with it.\n * @param {_catchment.CollectOptions} options Options when collecting data into a catchment. They can extend `Writable` options which will be passed to the `Catchment` constructor.\n * @param {boolean} [options.binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n * @param {boolean} [options.proxyError=false] Sets whether an error emitted by the stream with have its stack start at the line where the `collect` was called rather than inside of the stream. In other words, hides the implementation of the stream. Default `false`.\n * @example\n *\n * import { collect } from 'catchment'\n * import { createReadStream } from 'fs'\n *\n * const rs = createReadStream(path)\n * await collect(rs, { proxyError: true })\n */\nexport const collect = async (readable, options = {}) => {\n  const { promise } = new Catchment({\n    rs: readable,\n    ...options,\n    er: erotic(true),\n  })\n  const res = await promise\n  return res\n}\n\n/* typal types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_catchment.Options} Options Options to pass to the `Writable` super constructor, and others shown below.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _catchment.Options Options to pass to the `Writable` super constructor, and others shown below.\n * @prop {!stream.Readable} [rs] A readable stream to automatically pipe into the catchment. If an error occurs during reading of this stream, the catchment promise will be rejected with it.\n * @prop {boolean} [binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('stream').Readable} stream.Readable\n */\n\n/* typal types/collect.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_catchment.CollectOptions} CollectOptions Options when collecting data into a catchment. They can extend `Writable` options which will be passed to the `Catchment` constructor.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _catchment.CollectOptions Options when collecting data into a catchment. They can extend `Writable` options which will be passed to the `Catchment` constructor.\n * @prop {boolean} [binary=false] Whether to return a raw buffer instead of a string. The string is created by joining all incoming chunks together with `.join('')` method. Default `false`.\n * @prop {boolean} [proxyError=false] Sets whether an error emitted by the stream with have its stack start at the line where the `collect` was called rather than inside of the stream. In other words, hides the implementation of the stream. Default `false`.\n */\n","import { createReadStream } from 'fs'\nimport { collect } from 'catchment'\n\n/**\n * Read a file.\n * @param {string} path The path to the file to read.\n */\nexport default async function read(path) {\n  const rs = createReadStream(path)\n  /** @type {string} */\n  const res = await collect(rs)\n  return res\n}\n\n/**\n * Read a file as a buffer.\n * @param {string} path The path to the file to read.\n */\nexport async function readBuffer(path) {\n  const rs = createReadStream(path)\n  /** @type {Buffer} */\n  const res = await collect(rs, { binary: true })\n  return res\n}","/**\n * Returns an array of captured groups of a regular expression as objects. Does not modify the `lastIndex` property of the regex.\n * @param {RegExp} re The regular expression used for matching.\n * @param {string} string String to find matches in.\n * @param {Array<string>} keys Keys to use to create an captured group object.\n * @param {boolean} addPositions Whether to include positions in the return.\n * @example\n *\n```js\nconst re = /(test) inside of a (string)(\\d)?/ig\nconst s = 'Test inside of a STRING1. TEST inside of a string.'\nconst keys = ['test', 'string', 'number']\nconst res = mismatch(re, s, keys)\n\n// result:\n[\n {\n   test: 'Test',\n   string: 'STRING',\n   number: '1',\n },\n {\n   test: 'TEST',\n   string: 'string',\n },\n]\n```\n */\nexport default function mismatch(re, string, keys, addPositions = false) {\n  /** @type {!Array<!Object<string, string>>} */\n  const m = []\n  string.replace(re, (match, ...args) => {\n    // remove position and input\n    const position = args[args.length - 2]\n    const start = addPositions ? { position } : {}\n    const p = args.slice(0, args.length - 2)\n    const o = p.reduce((acc, capturedGroup, i) => {\n      const key = keys[i]\n      if (!(key && capturedGroup !== undefined)) return acc\n      acc[key] = capturedGroup\n      return acc\n    }, start)\n    m.push(o)\n  })\n  return m\n}","import mismatch from 'mismatch'\n\nconst RE = /^ *import(?:\\s+(?:[^\\s,]+)\\s*,?)?(?:\\s*{(?:[^}]+)})?\\s+from\\s+(['\"])(.+?)\\1/gm\nconst RE2 = /^ *import\\s+(?:.+?\\s*,\\s*)?\\*\\s+as\\s+.+?\\s+from\\s+(['\"])(.+?)\\1/gm\nconst RE3 = /^ *import\\s+(['\"])(.+?)\\1/gm\nconst RE4 = /^ *export\\s+(?:{[^}]+?}|\\*)\\s+from\\s+(['\"])(.+?)\\1/gm\n\n/**\n * Returns the names of the modules imported with `import` and `export` statements.\n * @param {string} source The source to detect matches in.\n */\nconst getMatches = (source) => {\n  const res = [RE, RE2, RE3, RE4].reduce((acc, re) => {\n    const m = mismatch(re, source, ['q', 'from'])\n      .map(a => a['from'])\n    return [...acc, ...m]\n  }, [])\n  return res\n}\n\nexport default getMatches\n\nexport const RES = {\n  RE, RE2, RE3, RE4,\n}","import { join, relative, resolve, dirname } from 'path'\nimport exists from '@wrote/exists'\nimport read from '@wrote/read'\nimport resolveDep from 'resolve-dependency'\n\n/**\n * Finds the location of the `package.json` for the given dependency in the directory, and its entry file.\n * @param {string} dir The path to the directory where the requiring file is located.\n * @param {string} name The name of the required package.\n * @param {!_fpj.Config} opts The options for `fpj`.\n * @param {!Array<string>} [opts.fields] Any additional fields from `package.json` file to return.\n * @param {boolean} [opts.soft=false] If the entry export (main or module) does not exist, `soft` mode will not throw an error, but add the `hasEntry` property to the output set to _false_. Default `false`.\n * @returns {!Promise<!_fpj.Return>}\n */\nconst findPackageJson = async (dir, name, opts = {}) => {\n  const { fields, soft = false } = opts\n  const fold = join(dir, 'node_modules', name)\n  const path = join(fold, 'package.json')\n  const e = await exists(path)\n  if (e) {\n    const res = await findEntry(path, fields)\n    if (res === undefined)\n      throw new Error(`The package ${relative('', path)} does export the module.`)\n    else if (!res.entryExists && !soft)\n      throw new Error(`The exported module ${res.main} in package ${name} does not exist.`)\n    const { entry, version, packageName, main, entryExists, ...rest } = res\n    const result = /** @type {!_fpj.Return} */ ({\n      entry: relative('', entry),\n      packageJson: relative('', path),\n      ...(version ? { version } : {}),\n      packageName,\n      ...(main ? { hasMain: true } : {}),\n      ...(!entryExists ? { entryExists: false } : {}),\n      ...rest,\n    })\n    return result\n  }\n  if (dir == '/' && !e)\n    throw new Error(`Package.json for module ${name} not found.`)\n  return findPackageJson(join(resolve(dir), '..'), name, opts)\n}\n\n/**\n * Finds the path to the entry based on package.json file.\n * @param {string} path\n * @param {!Array<string>} fields\n */\nexport const findEntry = async (path, fields = []) => {\n  const f = await read(path)\n  let mod, version, packageName, main, rest\n  try {\n    ({\n      'module': mod,\n      'version': version,\n      'name': packageName,\n      'main': main,\n      ...rest\n    } = JSON.parse(f))\n    rest = fields.reduce((acc, current) => {\n      acc[current] = rest[current]\n      return acc\n    }, {})\n  } catch (err) {\n    throw new Error(`Could not parse ${path}.`)\n  }\n  const dir = dirname(path)\n  let resolved = mod || main\n  if (!resolved) {\n    const indexExists = await exists(join(dir, 'index.js'))\n    if (!indexExists) return undefined\n    resolved = main = 'index.js'\n  }\n  let entry = join(dir, resolved)\n  let r\n  try {\n    ({ path: r } = await resolveDep(entry))\n    entry = r\n  } catch (err) {/* does not exist */}\n  return { entry, version, packageName, main: !mod && main,\n    entryExists: !!r,\n    ...rest }\n}\n\nexport default findPackageJson\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_fpj.Config} Config The options for `fpj`.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _fpj.Config The options for `fpj`.\n * @prop {!Array<string>} [fields] Any additional fields from `package.json` file to return.\n * @prop {boolean} [soft=false] If the entry export (main or module) does not exist, `soft` mode will not throw an error, but add the `hasEntry` property to the output set to _false_. Default `false`.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_fpj.Return} Return The return type of the program.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {Object} _fpj.Return The return type of the program.\n * @prop {string} entry The location of the package's entry file. The preference is given to the `module` field.\n * @prop {string} packageJson The path to the package.json file itself.\n * @prop {string} packageName The name of the resolved package.\n * @prop {string} [version] The version of the package.\n * @prop {boolean} [hasMain] Whether the entry is the `main` rather than `module`.\n * @prop {boolean} [entryExists] In soft mode, will be set to `false` if the entry file does not exist.\n */\n","import { dirname, join } from 'path'\nimport { builtinModules } from 'module'\nimport read from '@wrote/read'\nimport resolveDependency from 'resolve-dependency'\nimport getMatches from '@depack/detect'\nimport split from '@depack/split'\nimport findPackageJson from 'fpj'\nimport mismatch from 'mismatch'\nimport erotic from 'erotic'\n\nexport const checkIfLib = modName => /^[./]/.test(modName)\n\n/**\n * Expands the dependency match to include `package.json` and entry paths.\n * @param {string} path The path to the file.\n * @param {!Array<string>} matches The matches.\n * @param {boolean} [soft] Whether to throw when a dependency's package.json is not found.\n * @param {!Array<string>} [fields] What additional fields to fetch from package.json.\n * @returns {!Promise<!Array<!_staticAnalysis.DependencyMeta>>}\n */\nconst getDependenciesMeta = async (path, matches, soft, fields, pckg = null) => {\n  const e = erotic()\n  const dir = dirname(path)\n  const proms = matches.map(async (name) => {\n    const internal = builtinModules.includes(name)\n    if (internal) return { internal: name }\n    const isLib = checkIfLib(name)\n    if (isLib) {\n      try {\n        const { path: entry } = await resolveDependency(name, path)\n        return { entry, package: pckg }\n      } catch (err) { /*\n        maybe a local package with package.json\n      */}\n    } else {\n      const { name: n, paths } = split(name)\n      if (paths) {\n        const { packageJson, packageName } = await findPackageJson(dir, n)\n        const d = dirname(packageJson)\n        const { path: entry } = await resolveDependency(join(d, paths))\n        return { entry, package: packageName }\n      }\n    }\n    try {\n      const {\n        entry, packageJson, version, packageName, hasMain, ...rest\n      } = await findPackageJson(dir, name, { fields })\n      if (packageName == pckg) {\n        console.warn('[static-analysis] Skipping package %s that imports itself in %s', packageName, path)\n        return null\n      }\n      return {\n        entry, packageJson, version, name: packageName,\n        ...(hasMain ? { hasMain } : {}),\n        ...rest }\n    } catch (err) {\n      if (soft) return null\n      throw e(err)\n    }\n  })\n  return (await Promise.all(proms)).filter(Boolean)\n}\n\n/**\n * Detects the imports.\n * @param {string} path\n * @param {Object} cache\n * @returns {!Promise<!Array<!_staticAnalysis.Detection>>}\n */\nexport const detect = async (path, cache = {}, {\n  nodeModules = true, shallow = false, soft = false, fields = [],\n  node_modules_cache = {},\n  mergeSameNodeModules = true,\n  package: pckg } = {}) => {\n  if (path in cache) return []\n  cache[path] = 1\n  const source = await read(path)\n  const matches = getMatches(source)\n  const requireMatches = getRequireMatches(source)\n  const fm = nodeModules ? matches : matches.filter(checkIfLib)\n  const fr = nodeModules ? requireMatches : requireMatches.filter(checkIfLib)\n\n  let deps\n  try {\n    const dm = await getDependenciesMeta(path, fm, soft, fields, pckg)\n    const rm = await getDependenciesMeta(path, fr, soft, fields, pckg)\n    rm.forEach((val) => {\n      val.required = true\n    })\n    deps = [...dm, ...rm]\n  } catch (err) {\n    err.message = `${path}\\n [!] ${err.message}`\n    throw err\n  }\n  const Deps = mergeSameNodeModules ? deps.map(o => {\n    const { name, version, required } = o\n    if (name && version) {\n      // for non-flattened node_modules structure, e.g., when linking\n      // to prevent multiple same packages like\n      // depA, node_modules/depB/node_modules/depA\n      const n = `${name}:${version}${required ? '-required' : ''}`\n      const existing = node_modules_cache[n]\n      if (existing) return existing\n\n      node_modules_cache[n] = o\n    }\n    return o\n  }) : deps\n  const d = Deps.map(o => ({ ...o, from: path }))\n  const entries = Deps\n    .filter(({ entry }) => {\n      return entry && !(entry in cache)\n    })\n  const discovered = await entries\n    .reduce(async (acc, {\n      entry, hasMain, packageJson, name, package: p }) => {\n      if (packageJson && shallow) return acc\n      const accRes = await acc\n      const res = await detect(entry, cache, {\n        nodeModules, shallow, soft, fields, package: name || p,\n        node_modules_cache, mergeSameNodeModules,\n      })\n      const r = res\n        .map(o => ({\n          ...o,\n          from: o.from ? o.from : entry,\n          ...(!o.packageJson && hasMain ? { hasMain } : {}),\n        }))\n      return [...accRes, ...r]\n    }, d)\n  return discovered\n}\n\nexport const getRequireMatches = (source) => {\n  const m = mismatch(/(?:^|[^\\w\\d_])require\\(\\s*(['\"])(.+?)\\1\\s*\\)/gm, source, ['q', 'from'])\n  const res = m.map(a => a['from'])\n  return res\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('..').Detection} _staticAnalysis.Detection\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('..').DependencyMeta} _staticAnalysis.DependencyMeta\n */","/**\n * Splits the package name possibly with scope and returns the name and the\n * path within that page that was required.\n * @param {string} from The package, e.g., `@depack/depack/src`, or `depack`.\n */\nconst split = (from) => {\n  let [scope, name, ...paths] = from.split('/')\n  if (!scope.startsWith('@') && name) {\n    paths = [name, ...paths]\n    name = scope\n  } else if (!scope.startsWith('@')) {\n    name = scope\n  } else {\n    name = `${scope}/${name}`\n  }\n  return { name, paths: paths.join('/') }\n}\n\nexport default split","import Diff from './diff'\n\nconst colors = {\n  'black': 30,\n  'red': 31,\n  'green': 32,\n  'yellow': 33,\n  'blue': 34,\n  'magenta': 35,\n  'cyan': 36,\n  'white': 37,\n  'grey': 90,\n}\n\nconst backgroundColors = {\n  'black': 40,\n  'red': 41,\n  'green': 42,\n  'yellow': 43,\n  'blue': 44,\n  'magenta': 45,\n  'cyan': 46,\n  'white': 47,\n}\n\n/**\n * Color the foreground.\n * @param {string} string The string to color.\n * @param {_erte.Color} color The color to apply.\n */\nexport function c(string, color) {\n  const cc = colors[color]\n  if (!cc) return string\n  return `\\x1b[${cc}m${string}\\x1b[0m`\n}\n\n/**\n * Color the background.\n * @param {string} string The string to color.\n * @param {_erte.Color} color The color to apply.\n */\nexport function b(string, color) {\n  const cc = backgroundColors[color]\n  if (!cc) return string\n  return `\\x1b[${cc}m${string}\\x1b[0m`\n}\n\n/**\n * Compares two strings and outputs a coloured version where strings don't match.\n * @param {string} source A string to compare.\n * @param {string} target Target string to compare with.\n * @returns {string} A string which uses shell-codes to highligh differences.\n */\nexport default function erte(source, target) {\n  const diff = new Diff()\n  const d = diff.diff(source, target)\n  const m = d.map(({ added, removed, value }) => {\n    let p\n    const s = value.split(' ')\n    if (added) {\n      p = s.map(t => {\n        return t.replace(/\\n$/mg, '\u23ce\\n')\n      }).map(t => c(t, 'green')).join(b(' ', 'green'))\n    } else if (removed) {\n      p = s.map(t => {\n        return t.replace(/\\n$/mg, '\u23ce\\n')\n      }).map(t => c(t, 'red')).join(b(' ', 'red'))\n    } else {\n      p = c(value, 'grey')\n    }\n    return p\n  })\n  const s = m.join('')\n  return s\n}\n\n/* documentary types/index.xml */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {_erte.Color} Color The color to apply.\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {('black'|'red'|'green'|'yellow'|'blue'|'magenta'|'cyan'|'white'|'grey')} _erte.Color The color to apply.\n */\n","import { lstat, readdir } from 'fs'\nimport makePromise from 'makepromise'\nimport { join, relative } from 'path'\n\n/**\n * Update information about directory's content with lstat.\n * @param {string} dirPath Path to the root directory\n * @param {!Array<string>} dirContent\n * @returns {!Promise<!Array<!_wrote.File>>} An array with file objects.\n */\nasync function lstatFiles(dirPath, dirContent) {\n  const readFiles = dirContent.map(async (relativePath) => {\n    const path = join(dirPath, relativePath)\n    const ls = await makePromise(lstat, path)\n    return {\n      lstat: ls,\n      path,\n      relativePath,\n    }\n  })\n  const res = await Promise.all(readFiles)\n  return res\n}\n\n/**\n * Check if lstat result is a directory\n * @param {!_wrote.File} lstatRes\n * @param {!fs.Stats} lstatRes.lstat The stats of the item.\n * @param {string} lstatRes.path The full path of the item.\n * @param {string} lstatRes.relativePath The name of the item.\n * @returns {boolean} true if is a directory\n */\nconst isDirectory = lstatRes => lstatRes.lstat.isDirectory()\n/**\n * Check if lstat result is not a directory\n * @param {!_wrote.File} lstatRes\n * @param {!fs.Stats} lstatRes.lstat The stats of the item.\n * @param {string} lstatRes.path The full path of the item.\n * @param {string} lstatRes.relativePath The name of the item.\n * @returns {boolean} true if is not a directory\n */\nconst isNotDirectory = lstatRes => !lstatRes.lstat.isDirectory()\n\nconst getType = (lstatRes) => {\n  if (lstatRes.lstat.isDirectory()) {\n    return 'Directory'\n  }\n  if (lstatRes.lstat.isFile()) {\n    return 'File'\n  }\n  if (lstatRes.lstat.isSymbolicLink()) {\n    return 'SymbolicLink'\n  }\n}\n\n/**\n * Read a directory, and return its structure as an object. Only `Files`, `Directories` and `Symlinks` are included!\n * @param {string} dirPath Path to the directory.\n * @param {!_wrote.ReadDirStructureOpts} [opts] Options for reading the dir structure.\n * @param {!Array<string>} [opts.ignore] The list of paths inside of the directory to ignore, e.g., `[.git]`.\n * @returns {!Promise<!_wrote.DirectoryStructure>} An object reflecting the directory structure.\n * @example\n  ```js\n  const res = await readDirStructure('dir')\n  // result:\n  {\n    type: 'Directory',\n    content: {\n      'data.txt': {\n        type: 'File'\n      },\n      subdir: {\n        type: 'Directory',\n        content: {\n          'data-ln.txt': {\n            type: 'SymbolicLink'\n          },\n        }\n      }\n    }\n  }\n  ```\n */\nexport default async function readDirStructure(dirPath, opts = {}) {\n  if (!dirPath) {\n    throw new Error('Please specify a path to the directory')\n  }\n  const { ignore = [] } = opts\n  const ls = await makePromise(lstat, dirPath)\n  if (!ls.isDirectory()) {\n    const err = new Error('Path is not a directory')\n    err.code = 'ENOTDIR'\n    throw err\n  }\n  const dir = /** @type {!Array<string>} */ (await makePromise(readdir, dirPath))\n  const lsr = await lstatFiles(dirPath, dir)\n\n  const directories = lsr.filter(isDirectory) // reduce at once\n  const notDirectories = lsr.filter(isNotDirectory)\n\n  const files = notDirectories.reduce((acc, current) => {\n    const type = getType(current)\n    return {\n      ...acc,\n      [current.relativePath]: {\n        type,\n      },\n    }\n  }, {})\n\n  const dirs = await directories.reduce(async (acc, { path, relativePath }) => {\n    const rel = relative(dirPath, path)\n    if (ignore.includes(rel)) return acc\n    const res = await acc\n    const structure = await readDirStructure(path)\n    return {\n      ...res,\n      [relativePath]: structure,\n    }\n  }, {})\n\n  const content = {\n    ...files,\n    ...dirs,\n  }\n  return {\n    content,\n    type: 'Directory',\n  }\n}\n\n/**\n * After running the `readDirStructure`, this function can be used to flatten the `content` output and return the list of all files (not including symlinks).\n * @param {!_wrote.Content} content The recursive content of the directory.\n * @param {string} path The path to the directory.\n */\nexport const getFiles = (content, path) => {\n  let files = []\n  let dirs = []\n  Object.keys(content).forEach((key) => {\n    const { type } = content[key]\n    if (type == 'File') files.push(join(path, key))\n    else if (type == 'Directory') dirs.push(key)\n  })\n  const dirFiles = dirs.reduce((acc, dir) => {\n    const { content: c } =\n      /** @type {!_wrote.Content} */ (content[dir])\n    const f = getFiles(c, join(path, dir))\n    return [...acc, ...f]\n  }, [])\n  return [...files, ...dirFiles]\n}\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../').Content} _wrote.Content\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../').ReadDirStructureOpts} _wrote.ReadDirStructureOpts\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../').DirectoryStructure} _wrote.DirectoryStructure\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../').File} _wrote.File\n */","import staticAnalysis from 'static-analysis'\nimport { c } from 'erte'\nimport readDirStructure from '@wrote/read-dir-structure'\n\nmodule.exports = {\n  'c': c,\n  'readDirStructure': readDirStructure,\n  'staticAnalysis': staticAnalysis,\n}","import resolveDependency from 'resolve-dependency'\nimport erotic from 'erotic'\nimport { detect } from './lib'\n\n/**\n * Detects all dependencies in a file and their dependencies recursively.\n * @param {!Array<string>|string} path The path to the file in which to detect dependencies.\n * @param {!_staticAnalysis.Config} [config] The configuration options for `staticAnalysis`.\n * @return {!Promise<!Array<_staticAnalysis.Detection>>}\n */\nconst staticAnalysis = async (path, config = {}) => {\n  const e = erotic()\n  let paths = Array.isArray(path) ? path : [path]\n  paths = await Promise.all(paths.map(async p => {\n    const { path: pp } = await resolveDependency(p)\n    return pp\n  }))\n\n  const {\n    nodeModules = true,\n    shallow = false,\n    soft = false,\n    fields = [],\n    mergeSameNodeModules = true,\n  } = config\n  let detected\n  try {\n    const cache = {}\n\n    detected = await paths.reduce(async (acc, p) => {\n      acc = await acc\n      const res = await detect(p, cache, {\n        nodeModules, shallow, soft, fields, mergeSameNodeModules })\n      acc.push(...res)\n      return acc\n    }, [])\n  } catch (err) {\n    throw e(err)\n  }\n  const filtered = detected.filter(({ internal, entry }, i) => {\n    if (internal) {\n      const fi = detected.findIndex(({ internal: ii }) => {\n        return ii == internal\n      })\n      return fi == i\n    }\n    const ei = detected.findIndex(({ entry: ee }) => {\n      return entry == ee\n    })\n    return ei == i\n  })\n  const f = filtered.map((ff) => {\n    const { entry, internal } = ff\n    const froms = detected\n      .filter(({ internal: i, entry: ee }) => {\n        if (internal) return internal == i\n        if (entry) return entry == ee\n      })\n      .map(({ from }) => from)\n      .filter((el, i, a) => a.indexOf(el) == i)\n    const newF =  { ...ff, from: froms }\n    return newF\n  })\n    .map(({ package: pckg, ...props }) => {\n      if (pckg) return { package: pckg, ...props }\n      return props\n    })\n  return f\n}\n\n/**\n * Sorts the detected dependencies into commonJS modules, packageJsons and internals.\n * @param {!Array<!_staticAnalysis.Detection>} detected The detected matches\n * @return {_staticAnalysis.SortReturn}\n */\nexport const sort = (detected) => {\n  const packageJsons = []\n  const commonJsPackageJsons = []\n  const commonJs = []\n  const js = []\n  const internals = []\n  const deps = []\n  detected\n    .forEach(({ packageJson, hasMain, name, entry, internal }) => {\n      if (internal) return internals.push(internal)\n\n      if (packageJson && hasMain)\n        commonJsPackageJsons.push(packageJson)\n      else if (packageJson) packageJsons.push(packageJson)\n      if (entry && hasMain) commonJs.push(entry)\n      else if (entry) js.push(entry)\n      if (name) deps.push(name)\n    })\n  return { commonJsPackageJsons,\n    packageJsons, commonJs, js, internals, deps }\n}\n\nexport default staticAnalysis\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../').Config} _staticAnalysis.Config\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../').SortReturn} _staticAnalysis.SortReturn\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('../').Detection} _staticAnalysis.Detection\n */"],
"names":["getStackSegment","stack","from","oneLine","splitStack","split","undefined","item","length","slice","items","join","getEntryStack","transparent","stackSegment","getCallerFromArguments","args","caller","homedir","os","extractPathRegex","pathRegex","homeDir","cleanStack","pretty","ignoredModules","j","re","RegExp","source","replace","filter","x","pathMatches","match","includes","test","trim","map","m","p1","makeCallback","entryCaller","entryStack","shadow","cb","messageOrError","arguments","errorStack","Error","calleeStackLine","message","isError","stackMessage","stackHeading","Object","assign","e","properties","erotic","checkArgumentIndex","i","makePromise","fn","resolveValue","er","fnLength","res","Promise","resolve","reject","err","error","allArgs","Array","isArray","forEach","arg","createReadStream","fs","lstat","readdir","exists","path","ls","dirname","relative","resolveDependency","relativeFrom","d","isDir","checkSources","isDirectory","fileChecked","fileRes","endsWith","s","startsWith","pp","builtinModules","_module","Writable","stream","pipeError","streamA","streamB","once","emit","Catchment","options","binary","rs","opts","proxyError","wrap","_","_caughtData","_promise","r","on","Buffer","concat","indexOf","pipe","chunk","encoding","callback","push","collect","readable","promise","read","mismatch","string","keys","o","p","reduce","acc","capturedGroup","key","start","RE","RE2","RE3","RE4","getMatches","a","findPackageJson","dir","name","fields","soft","fold","findEntry","entryExists","main","entry","version","packageName","rest","result","packageJson","hasMain","f","mod","JSON","parse","current","resolved","indexExists","checkIfLib","modName","getDependenciesMeta","matches","pckg","proms","internal","isLib","package","scope","paths","n","console","warn","all","Boolean","detect","cache","nodeModules","shallow","node_modules_cache","mergeSameNodeModules","requireMatches","getRequireMatches","fm","fr","dm","rm","val","required","deps","Deps","existing","discovered","entries","accRes","colors","lstatFiles","dirPath","dirContent","readFiles","relativePath","lstatRes","isNotDirectory","readDirStructure","ignore","code","lsr","directories","files","notDirectories","isFile","isSymbolicLink","type","dirs","rel","structure","content","module","exports","c","color","cc","staticAnalysis","config","detected","filtered","findIndex","fi","ii","ei","ee","ff","froms","el","newF","props"]
}
